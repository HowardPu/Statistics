/*
Copyright ï¿½ 1999 CERN - European Organization for Nuclear Research.
Permission to use, copy, modify, distribute and sell this software and its documentation for any purpose 
is hereby granted without fee, provided that the above copyright notice appear in all copies and 
that both that copyright notice and this permission notice appear in supporting documentation. 
CERN makes no representations about the suitability of this software for any purpose. 
It is provided "as is" without expressed or implied warranty.
*/

// Before CERN destroyed the world, it actually made something useful.
// And the bad indentation problem is also fixed 

package Utility;

public class Utility {
	
    protected static final double MAXGAM = 171.624376956302725;
    protected static final double LOGPI  = 1.14472988584940017414;
	
    protected static final double MACHEP =  1.11022302462515654042E-16;
    protected static final double MAXLOG =  7.09782712893383996732E2;
    protected static final double MINLOG = -7.451332191019412076235E2;
    protected static final double SQTPI  =  2.50662827463100050242E0;

    protected static final double big = 4.503599627370496e15;
    protected static final double biginv =  2.22044604925031308085e-16;
	
	// This code is at the courtesy of CERN
    // Take a positive real number as input
    // Return the value of error function at given real number
    public static final double erf(double paramDouble) {
        double[] arrayOfDouble1 = {9.604973739870516D, 90.02601972038427D, 2232.005345946843D, 7003.325141128051D, 55592.30130103949D };
        double[] arrayOfDouble2 = {33.56171416475031D, 521.3579497801527D, 4594.323829709801D, 22629.000061389095D, 49267.39426086359D };
        if (Math.abs(paramDouble) > 1.0D) {
            return 1.0D - erfc(paramDouble);
        }
        double d2 = paramDouble * paramDouble;
        return paramDouble * polevl(d2, arrayOfDouble1, 4) / p1evl(d2, arrayOfDouble2, 5);
    }
    
    // This code is at the courtesy of CERN
    // Take a positive real number as input
    // Return the value of complimentary error function at given real number
    public static final double erfc(double paramDouble) {
        double[] arrayOfDouble1 = {2.461969814735305E-10D, 0.5641895648310689D, 7.463210564422699D, 48.63719709856814D, 196.5208329560771D, 526.4451949954773D, 934.5285271719576D, 1027.5518868951572D, 557.5353353693994D };
        double[] arrayOfDouble2 = {13.228195115474499D, 86.70721408859897D, 354.9377788878199D, 975.7085017432055D, 1823.9091668790973D, 2246.3376081871097D, 1656.6630919416134D, 557.5353408177277D };
        double[] arrayOfDouble3 = {0.5641895835477551D, 1.275366707599781D, 5.019050422511805D, 6.160210979930536D, 7.4097426995044895D, 2.9788666537210022D };
        double[] arrayOfDouble4 = {2.2605286322011726D, 9.396035249380015D, 12.048953980809666D, 17.08144507475659D, 9.608968090632859D, 3.369076451000815D };
        double d1;
        if (paramDouble < 0.0D) {
            d1 = -paramDouble;
        } else {
            d1 = paramDouble;
        }
        if (d1 < 1.0D) {
            return 1.0D - erf(paramDouble);
        }
        double d3 = -paramDouble * paramDouble;
        if (d3 < -709.782712893384D) {
            if (paramDouble < 0.0D) {
                return 2.0D;
            } else {
                return 0.0D;
            }
        }
        d3 = Math.exp(d3);
        double d4;
        double d5;
        if (d1 < 8.0D) {
            d4 = polevl(d1, arrayOfDouble1, 8);
            d5 = p1evl(d1, arrayOfDouble2, 8);
        } else {
            d4 = polevl(d1, arrayOfDouble3, 5);
            d5 = p1evl(d1, arrayOfDouble4, 6);
        }
        double d2 = d3 * d4 / d5;
        if (paramDouble < 0.0D) {
            d2 = 2.0D - d2;
        }
        if (d2 == 0.0D) {
            if (paramDouble < 0.0D) {
                return 2.0D;
            } else {
                return 0.0D;
            }
        }
        return d2;
    }

    private static double p1evl(double paramDouble, double[] paramArrayOfDouble, int paramInt) {
        double d = paramDouble + paramArrayOfDouble[0];
        for (int i = 1; i < paramInt; i++) {
            d = d * paramDouble + paramArrayOfDouble[i];
        }
        return d;
    }
  
    private static double polevl(double paramDouble, double[] paramArrayOfDouble, int paramInt) {
        double d = paramArrayOfDouble[0];
        for (int i = 1; i <= paramInt; i++) {
            d = d * paramDouble + paramArrayOfDouble[i];
        }
        return d;
    }
    
    
    
    public static double beta(double a, double b) throws ArithmeticException {
    	double y;
    	y = a + b;
    	y = gamma(y);
    	if(y == 0.0) { 
    		return 1.0; 
    	}
    	if(a > b) {
    	    y = gamma(a) / y;
    		y *= gamma(b);
    	} else {
    		y = gamma(b) / y;
    		y *= gamma(a);
    	}
    	return(y);
    }
    
    /**
     * Returns the Gamma function of the argument.
     */
    public static double gamma(double x) throws ArithmeticException {
        double P[] = {1.60119522476751861407E-4, 1.19135147006586384913E-3,
    			      1.04213797561761569935E-2, 4.76367800457137231464E-2,
    			      2.07448227648435975150E-1, 4.94214826801497100753E-1,
    			      9.99999999999999996796E-1};
        double Q[] = {-2.31581873324120129819E-5, 5.39605580493303397842E-4,
    			      -4.45641913851797240494E-3, 1.18139785222060435552E-2,
    				  3.58236398605498653373E-2, -2.34591795718243348568E-1,
    				  7.14304917030273074085E-2, 1.00000000000000000320E0};
        double p = 0;
        double z = 0;
        double q = Math.abs(x);
        if(q > 33.0) {
            if( x < 0.0 ) {
    		    p = Math.floor(q);
    	        if( p == q ) {
    	        	throw new ArithmeticException("gamma: overflow");
    	        }
    	    z = q - p;
    	    if( z > 0.5 ) {
    		    p += 1.0;
    		    z = q - p;
    	    }
    	    z = q * Math.sin( Math.PI * z );
    	    if( z == 0.0 ) {
    	        throw new ArithmeticException("gamma: overflow");
    	    }
    	    z = Math.abs(z);
    	    z = Math.PI/(z * stirlingFormula(q) );
                return -z;
            } else {
    	        return stirlingFormula(x);
            }
        }
        z = 1.0;
        while(x >= 3.0) {
            x -= 1.0;
    	    z *= x;
        }
        while(x < 0.0) {
            if(x == 0.0) {
    	        throw new ArithmeticException("gamma: singular");
    	    } else if(x > -1.E-9) {
                return( z / ((1.0 + 0.5772156649015329 * x) * x) );
            }
    	    z /= x;
    	    x += 1.0;
        }
        while(x < 2.0) {
            if(x == 0.0) {
    	        throw new ArithmeticException("gamma: singular");
    	    } else if(x < 1.e-9) {
      	        return( z/((1.0 + 0.5772156649015329 * x) * x) );
            }
    	    z /= x;
    	    x += 1.0;
        }
        if((x == 2.0) || (x == 3.0)){ 	
            return z;
        }
        x -= 2.0;
    	p = polevl( x, P, 6 );
    	q = polevl( x, Q, 7 );
    	return  z * p / q;
    }
    
    /**
     * Returns the Incomplete Beta Function evaluated from zero to <tt>xx</tt>
     *
     * @param aa the alpha parameter of the beta distribution.
     * @param bb the beta parameter of the beta distribution.
     * @param xx the integration end point.
     */
    public static double incompleteBeta(double aa, double bb, double xx) throws ArithmeticException {
        double a, b, t, x, xc, w, y;
    	boolean flag;
    	if(aa <= 0.0 || bb <= 0.0) { 
    	    throw new ArithmeticException("ibeta: Domain error!");
    	}
        if((xx <= 0.0) || (xx >= 1.0)) {
      	    if(xx == 0.0) { 
      	        return 0.0;
      	    } 
       	    if(xx == 1.0) {
       	    	return 1.0;
       	    }
    	    throw new ArithmeticException("ibeta: Domain error!");
    	}
        flag = false;
    	if((bb * xx) <= 1.0 && xx <= 0.95) {
    	    t = powerSeries(aa, bb, xx);
    		return t;
    	}
        w = 1.0 - xx;
        /* Reverse a and b if x is greater than the mean. */
        if(xx > (aa / (aa + bb))) {
    	    flag = true;
    	    a = bb;
    	    b = aa;
    	    xc = xx;
    	    x = w;
    	} else {
      	    a = aa;
    	    b = bb;
    	    xc = w;
    	    x = xx;
    	}
        if(flag  && (b * x) <= 1.0 && x <= 0.95) {
     	    t = powerSeries(a, b, x);
    	    if(t <= MACHEP) { 	
    	    	t = 1.0 - MACHEP;
    	    } else { 		        
    	    	t = 1.0 - t;
    	    }
    		return t;
    	}
        
        /* Choose expansion for better convergence. */
        y = x * (a + b - 2.0) - (a - 1.0);
    	if(y < 0.0) {
    	    w = incompleteBetaFraction1( a, b, x );
    	} else {
    	    w = incompleteBetaFraction2( a, b, x ) / xc;
    	}
    	
        /* Multiply w by the factor
    	    a      b   _             _     _
    	   x  (1-x)   | (a+b) / ( a | (a) | (b) ) .   */
        y = a * Math.log(x);
    	t = b * Math.log(xc);
    	if((a + b) < MAXGAM && Math.abs(y) < MAXLOG && Math.abs(t) < MAXLOG) {
    	    t = Math.pow(xc,b);
    	    t *= Math.pow(x,a);
    	    t /= a;
    	    t *= w;
    	    t *= gamma(a+b) / (gamma(a) * gamma(b));
    	    if(flag) {
     	        if(t <= MACHEP) {	
     	            t = 1.0 - MACHEP;
     	        } else { 		        
     	            t = 1.0 - t;
     	        }
    	    }
    		return t;
        }
    	
    	/* Resort to logarithms.  */
    	y += t + logGamma(a+b) - logGamma(a) - logGamma(b);
    	y += Math.log(w/a);
        if(y < MINLOG) {
    	    t = 0.0;
    	} else {
    	    t = Math.exp(y);
    	}
        if(flag) {
     	    if( t <= MACHEP ) {	
     	    	t = 1.0 - MACHEP;
     	    } else { 		        
     	    	t = 1.0 - t;
     	    }
    	}
        return t;
    }  
    
    /**
     * Continued fraction expansion #1 for incomplete beta integral
     */
    public static double incompleteBetaFraction1(double a, double b, double x) throws ArithmeticException {
        double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;
    	double k1, k2, k3, k4, k5, k6, k7, k8;
    	double r, t, ans, thresh;
    	int n;

    	k1 = a;
    	k2 = a + b;
    	k3 = a;
    	k4 = a + 1.0;
    	k5 = 1.0;
    	k6 = b - 1.0;
    	k7 = k4;
    	k8 = a + 2.0;

    	pkm2 = 0.0;
    	qkm2 = 1.0;
    	pkm1 = 1.0;
    	qkm1 = 1.0;
    	ans = 1.0;
        r = 1.0;
    	n = 0;
    	thresh = 3.0 * MACHEP;
    	do {
    	    xk = -(x * k1 * k2) / (k3 * k4);
    	    pk = pkm1 +  pkm2 * xk;
    	    qk = qkm1 +  qkm2 * xk;
    	    pkm2 = pkm1;
    	    pkm1 = pk;
    	    qkm2 = qkm1;
    	    qkm1 = qk;

    	    xk = (x * k5 * k6) / (k7 * k8);
    	    pk = pkm1 +  pkm2 * xk;
    	    qk = qkm1 +  qkm2 * xk;
    	    pkm2 = pkm1;
    	    pkm1 = pk;
    	    qkm2 = qkm1;
    	    qkm1 = qk;

            if(qk != 0) {		
                r = pk / qk;
            }
            if(r != 0) {
    	        t = Math.abs((ans - r) / r);
    	        ans = r;
            } else {
                t = 1.0;
    		}
    	    if(t < thresh) {
    	    	return ans;
    	    }
    	      
    	    k1 += 1.0;
    		k2 += 1.0;
    	  	k3 += 2.0;
    	  	k4 += 2.0;
    	  	k5 += 1.0;
    	  	k6 -= 1.0;
    	  	k7 += 2.0;
    	  	k8 += 2.0;

    	  	if((Math.abs(qk) + Math.abs(pk)) > big) {
    	  	    pkm2 *= biginv;
    	  		pkm1 *= biginv;
    	  		qkm2 *= biginv;
    	        qkm1 *= biginv;
    		}
    	  	if((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {
    	  		pkm2 *= big;
    	  		pkm1 *= big;
    	  		qkm2 *= big;
    	   	    qkm1 *= big;
    	    }
        } while(++n < 300);
        return ans;
    }   
    
    /**
     * Continued fraction expansion #2 for incomplete beta integral
     */
    public static double incompleteBetaFraction2(double a, double b, double x) throws ArithmeticException {
        double xk, pk, pkm1, pkm2, qk, qkm1, qkm2;
        double k1, k2, k3, k4, k5, k6, k7, k8;
    	double r, t, ans, z, thresh;
    	int n;

    	k1 = a;
    	k2 = b - 1.0;
    	k3 = a;
    	k4 = a + 1.0;
    	k5 = 1.0;
    	k6 = a + b;
    	k7 = a + 1.0;
    	k8 = a + 2.0;

    	pkm2 = 0.0;
    	qkm2 = 1.0;
    	pkm1 = 1.0;
    	qkm1 = 1.0;
        z = x / (1.0 - x);
    	ans = 1.0;
    	r = 1.0;
    	n = 0;
    	thresh = 3.0 * MACHEP;
    	do {
    	    xk = -(z * k1 * k2) / (k3 * k4);
    	    pk = pkm1 +  pkm2 * xk;
    	    qk = qkm1 +  qkm2 * xk;
    	    pkm2 = pkm1;
            pkm1 = pk;
            qkm2 = qkm1;
    	    qkm1 = qk;

            xk = (z * k5 * k6) / (k7 * k8);
            pk = pkm1 +  pkm2 * xk;
            qk = qkm1 +  qkm2 * xk;
            pkm2 = pkm1;
    	    pkm1 = pk;
            qkm2 = qkm1;
            qkm1 = qk;

    	    if(qk != 0){
    	        r = pk/qk;
    	    }
    	    if(r != 0) {
    		    t = Math.abs((ans - r) / r);
    		    ans = r;
    		} else {
    		    t = 1.0;
    		}
    	    if(t < thresh) {
    	        return ans;
    	    }
    	    k1 += 1.0;
    	    k2 -= 1.0;
    	    k3 += 2.0;
    	    k4 += 2.0;
    	    k5 += 1.0;
    	    k6 += 1.0;
    	    k7 += 2.0;
    	    k8 += 2.0;
    	    if((Math.abs(qk) + Math.abs(pk)) > big) {
    		    pkm2 *= biginv;
    		    pkm1 *= biginv;
    		    qkm2 *= biginv;
    		    qkm1 *= biginv;
    		}
    	    if((Math.abs(qk) < biginv) || (Math.abs(pk) < biginv)) {
    		    pkm2 *= big;
    		    pkm1 *= big;
    		    qkm2 *= big;
    		    qkm1 *= big;
    		}
    	} while( ++n < 300 );
        return ans;
    }
    
    /**
     * Returns the Incomplete Gamma function
     * And it required to double the value to make the value valid
     * @param a the parameter of the gamma distribution.
     * @param x the integration end point.
     */
    public static double incompleteGamma(double a, double x)  throws ArithmeticException {
        double ans, ax, c, r;
        if(x <= 0 || a <= 0) {
        	return 0.0;
        }
        if(x > 1.0 && x > a) {
        	return 1.0 - incompleteGammaComplement(a, x);
        }
        /* Compute  x**a * exp(-x) / gamma(a)  */
    	ax = a * Math.log(x) - x - logGamma(a);
    	if(ax < -MAXLOG) {
    		return(0.0);
    	}
        ax = Math.exp(ax);
        /* power series */
    	r = a;
    	c = 1.0;
    	ans = 1.0;
        do {
      	    r += 1.0;
    	    c *= x / r;
    	    ans += c;
    	} while(c / ans > MACHEP);
        return(ans * ax / a);
    }
    
    /**
     * Returns the Complemented Incomplete Gamma function
     * And it required to double the value to make the value valid 
     * @param a the parameter of the gamma distribution.
     * @param x the integration start point.
     */
    public static double incompleteGammaComplement(double a, double x) throws ArithmeticException {
        double ans, ax, c, yc, r, t, y, z;
    	double pk, pkm1, pkm2, qk, qkm1, qkm2;
        if(x <= 0 || a <= 0) {
        	return 1.0;
        }
        if(x < 1.0 || x < a) {
        	return 1.0 - incompleteGamma(a,x);
        }
        ax = a * Math.log(x) - x - logGamma(a);
    	if(ax < -MAXLOG) {
    		return 0.0;
    	}
        ax = Math.exp(ax);

    	/* continued fraction */
    	y = 1.0 - a;
    	z = x + y + 1.0;
   		c = 0.0;
    	pkm2 = 1.0;
    	qkm2 = x;
   		pkm1 = x + 1.0;
    	qkm1 = z * x;
    	ans = pkm1/qkm1;

    	do {
      	    c += 1.0;
    	    y += 1.0;
    	    z += 2.0;
    	    yc = y * c;
    	    pk = pkm1 * z  -  pkm2 * yc;
    	    qk = qkm1 * z  -  qkm2 * yc;
    	    if(qk != 0) {
    		    r = pk/qk;
    		    t = Math.abs( (ans - r)/r );
    		    ans = r;
    	    } else {
    		    t = 1.0;
    	    }
    	    pkm2 = pkm1;
    	    pkm1 = pk;
    	    qkm2 = qkm1;
    	    qkm1 = qk;
    	    if(Math.abs(pk) > big) {
    		pkm2 *= biginv;
    		pkm1 *= biginv;
    		qkm2 *= biginv;
    		qkm1 *= biginv;
    	    }
    	} while(t > MACHEP);
    	return ans * ax;
    }
    
    /**
     * Returns the natural logarithm of the gamma function; formerly named <tt>lgamma</tt>.
     */
    public static double logGamma(double x) throws ArithmeticException {
        double p, q, w, z;
        double A[] = {8.11614167470508450300E-4, -5.95061904284301438324E-4,
    				  7.93650340457716943945E-4, -2.77777777730099687205E-3,
    				  8.33333333333331927722E-2};
    	double B[] = {-1.37825152569120859100E3, -3.88016315134637840924E4,
    			      -3.31612992738871184744E5, -1.16237097492762307383E6,
    				  -1.72173700820839662146E6, -8.53555664245765465627E5};
        double C[] = {/* 1.00000000000000000000E0, */ -3.51815701436523470549E2,
    			      -1.70642106651881159223E4, -2.20528590553854454839E5,
    				  -1.13933444367982507207E6, -2.53252307177582951285E6,
    				  -2.01889141433532773231E6};
        if(x < -34.0) {
      	    q = -x;
    	    w = logGamma(q);
    	    p = Math.floor(q);
    	    if(p == q) {
    	    	throw new ArithmeticException("lgam: Overflow");
    	    }
    	    z = q - p;
    	    if(z > 0.5) {
    		    p += 1.0;
    		    z = p - q;
     	    }
    	    z = q * Math.sin(Math.PI * z);
    	    if(z == 0.0) { 
    	    	throw new ArithmeticException("lgamma: Overflow");
    	    }
    	    z = LOGPI - Math.log(z) - w;
    	    return z;
    	}
        if(x < 13.0) {
      	    z = 1.0;
    	    while(x >= 3.0) {
    	        x -= 1.0;
    		    z *= x;
    	    }
    	    while(x < 2.0) {
    	        if(x == 0.0) {
    		        throw new ArithmeticException("lgamma: Overflow");
    		    }
    		    z /= x;
    		    x += 1.0;
    	    }
    	    if(z < 0.0) {
    		    z = -z;
    	    }
    	    if(x == 2.0) {
    		    return Math.log(z);
    	    }
    	    x -= 2.0;
    	    p = x * polevl(x, B, 5) / p1evl(x, C, 6);
     	    return(Math.log(z) + p);
        }
        if(x > 2.556348e305) {
        	throw new ArithmeticException("lgamma: Overflow");
        }
        q = (x - 0.5) * Math.log(x) - x + 0.91893853320467274178;
    	if(x > 1.0e8) {
    		return(q);
    	}
        p = 1.0 / (x * x);
    	if(x >= 1000.0) {
    	    q += ((7.9365079365079365079365e-4 * p - 
    	    	   2.7777777777777777777778e-3) * p + 
    	    	   0.0833333333333333333333) / x;
    	} else {
    	     q += polevl(p, A, 4) / x;
    	}
    	return q;
    }
    /**
     * Power series for incomplete beta integral; formerly named <tt>pseries</tt>.
     * Use when b*x is small and x not too close to 1.  
     */
    public static double powerSeries(double a, double b, double x) throws ArithmeticException {
        double s, t, u, v, n, t1, z, ai;

    	ai = 1.0 / a;
    	u = (1.0 - b) * x;
    	v = u / (a + 1.0);
    	t1 = v;
    	t = u;
    	n = 2.0;
    	s = 0.0;
    	z = MACHEP * ai;
    	while(Math.abs(v) > z) {
    	    u = (n - b) * x / n;
    	    t *= u;
    	    v = t / (a + n);
    	    s += v; 
    	    n += 1.0;
    	}
    	s += t1;
    	s += ai;
    	u = a * Math.log(x);
    	if((a+b) < MAXGAM && Math.abs(u) < MAXLOG) {
    	    t = gamma(a + b) / (gamma(a) * gamma(b));
    	    s = s * t * Math.pow(x,a);
    	} else {
    	    t = logGamma(a+b) - logGamma(a) - logGamma(b) + u + Math.log(s);
    	    if(t < MINLOG) {	
    	        s = 0.0;
    	    }  else { 	            
    	        s = Math.exp(t);
    	    }
    	}
    	return s;
    }
    
    /**
     * Returns the Gamma function computed by Stirling's formula; formerly named <tt>stirf</tt>.
     * The polynomial STIR is valid for 33 <= x <= 172.
     */
    public static double stirlingFormula(double x) throws ArithmeticException {
        double STIR[] = {7.87311395793093628397E-4, -2.29549961613378126380E-4,
    					-2.68132617805781232825E-3, 3.47222221605458667310E-3,
    			         8.33333333333482257126E-2,};
    	double MAXSTIR = 143.01608;
    	double w = 1.0 / x;
   		double  y = Math.exp(x);

    	w = 1.0 + w * polevl(w, STIR, 4);

    	if(x > MAXSTIR) {
   	       /* Avoid overflow in Math.pow() */
            double v = Math.pow(x, 0.5 * x - 0.25);
            y = v * (v / y);
    	} else {
    		y = Math.pow(x, x - 0.5) / y;
    	}
    	y = SQTPI * y * w;
    	return y;
    }
    
    public static void main(String[] args) {
    	double a = 20;
    	double x = 5;
    	double x2 = 10;
    	double test = Utility.beta(50, 100);
    	double test2 = Utility.incompleteBeta(100, 100, 0.5);
    	double test3 = gamma(a);
    	System.out.println(test);
    	System.out.println(test2);
    }
}
