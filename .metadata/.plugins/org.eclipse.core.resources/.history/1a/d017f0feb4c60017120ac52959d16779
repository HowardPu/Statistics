package distributions;

import java.util.*;

/* This class defines the general distribution function in Statistics, 
 * which is, the area under the DistributionFunction from the lowest bound to the highest bound
 * is 1. And this general distribution function also contains all functions that are needed for
 * some popular probability distribution function.
 * 
 * In order to extend this class, a Probability Distribution class should indicate
 *     1/ mean
 *     2/ variance 
 *     3/ median
 */
public abstract class DistributionFunction {
	private double highestBound;
	private double lowestBound;
	
	public DistributionFunction(double lowestBound, double highestBound) {
		if(lowestBound >= highestBound) {
            throw new IllegalArgumentException("Illegal domain of this distribution");
        }
        this.lowestBound = lowestBound;
        this.highestBound = highestBound;
	}
	
	// return the lowest bound of this probability distribution
	public double getLowestBound() {
		return lowestBound;
	}
	
	// return the highest bound of this probability distribution
	public double getHighestBound() {
		return highestBound;
	}
	
	// This list is for speeding the calculation of error function inverse
    private List<Double> coefficient = new ArrayList<Double> ();
    
    // This code is at the courtesy of CERN
    // Take a positive real number as input
    // Return the value of error function at given real number
    public static final double erf(double paramDouble) {
        double[] arrayOfDouble1 = {9.604973739870516D, 90.02601972038427D, 2232.005345946843D, 7003.325141128051D, 55592.30130103949D };
        double[] arrayOfDouble2 = {33.56171416475031D, 521.3579497801527D, 4594.323829709801D, 22629.000061389095D, 49267.39426086359D };
        if (Math.abs(paramDouble) > 1.0D) {
            return 1.0D - erfc(paramDouble);
        }
        double d2 = paramDouble * paramDouble;
        return paramDouble * polevl(d2, arrayOfDouble1, 4) / p1evl(d2, arrayOfDouble2, 5);
    }
    
    // This code is at the courtesy of CERN
    // Take a positive real number as input
    // Return the value of complimentary error function at given real number
    public static final double erfc(double paramDouble) {
        double[] arrayOfDouble1 = {2.461969814735305E-10D, 0.5641895648310689D, 7.463210564422699D, 48.63719709856814D, 196.5208329560771D, 526.4451949954773D, 934.5285271719576D, 1027.5518868951572D, 557.5353353693994D };
        double[] arrayOfDouble2 = {13.228195115474499D, 86.70721408859897D, 354.9377788878199D, 975.7085017432055D, 1823.9091668790973D, 2246.3376081871097D, 1656.6630919416134D, 557.5353408177277D };
        double[] arrayOfDouble3 = {0.5641895835477551D, 1.275366707599781D, 5.019050422511805D, 6.160210979930536D, 7.4097426995044895D, 2.9788666537210022D };
        double[] arrayOfDouble4 = {2.2605286322011726D, 9.396035249380015D, 12.048953980809666D, 17.08144507475659D, 9.608968090632859D, 3.369076451000815D };
        double d1;
        if (paramDouble < 0.0D) {
            d1 = -paramDouble;
        } else {
            d1 = paramDouble;
        }
        if (d1 < 1.0D) {
            return 1.0D - erf(paramDouble);
        }
        double d3 = -paramDouble * paramDouble;
        if (d3 < -709.782712893384D) {
            if (paramDouble < 0.0D) {
                return 2.0D;
            } else {
                return 0.0D;
            }
        }
        d3 = Math.exp(d3);
        double d4;
        double d5;
        if (d1 < 8.0D) {
            d4 = polevl(d1, arrayOfDouble1, 8);
            d5 = p1evl(d1, arrayOfDouble2, 8);
        } else {
            d4 = polevl(d1, arrayOfDouble3, 5);
            d5 = p1evl(d1, arrayOfDouble4, 6);
        }
        double d2 = d3 * d4 / d5;
        if (paramDouble < 0.0D) {
            d2 = 2.0D - d2;
        }
        if (d2 == 0.0D) {
            if (paramDouble < 0.0D) {
                return 2.0D;
            } else {
                return 0.0D;
            }
        }
        return d2;
    }

    private static double p1evl(double paramDouble, double[] paramArrayOfDouble, int paramInt) {
        double d = paramDouble + paramArrayOfDouble[0];
        for (int i = 1; i < paramInt; i++) {
            d = d * paramDouble + paramArrayOfDouble[i];
        }
        return d;
    }
  
    private static double polevl(double paramDouble, double[] paramArrayOfDouble, int paramInt) {
        double d = paramArrayOfDouble[0];
        for (int i = 1; i <= paramInt; i++) {
            d = d * paramDouble + paramArrayOfDouble[i];
        }
        return d;
    }
    
    // Take a positive real number as input
    // Return the value of inverse error function at given real number
    public final double erfInverse(double x) {
        if(x < -1 || x > 1) {
            throw new IllegalArgumentException("Given number is out of domain");
        }
        if(x == -1) {
            return Double.NEGATIVE_INFINITY;
        } else if(x == 1) {
            return Double.POSITIVE_INFINITY;
        }
        return 0.5 * Math.sqrt(Math.PI) * x * erfInverseExpansion(x, 0, 1000);
    }
    
    private double erfInverseExpansion(double x, int start, int end) {
        if(start + 1 == end) {
            return inverseCoe(end - 1) + Math.PI * 0.25 * inverseCoe(end) * x * x / (2 * end + 1);
        } else {
            return inverseCoe(start) / (2 * start + 1) + Math.PI * 0.25 * x * x * 
                                       erfInverseExpansion(x, start + 1, end);
        }
    }
    
    private double inverseCoe(int x) {
        if(x < coefficient.size()) {
            return coefficient.get(x);
        } else if(x == 0){
            if(x == coefficient.size()) {
                coefficient.add(1.0);
            }
            return 1;
        } else {
            double result = 0;
            for(int i = 0; i < x; i++) {
                result += inverseCoe(i) * inverseCoe(x - 1 - i) / (i + 1) / (2 * i + 1); 
            }
            if(x == coefficient.size()) {
                coefficient.add(result);
            }
            return result;
        }
    }
    
    // Take two real numbers that can be written as k * 0.5
    // (where k is an integer greater than -1)
    // return the beta coefficient of given real numbers
    public final double beta(double x1, double x2) {
        return gamma(x1) / gamma(x1 + x2) *  gamma(x2);
    }
    
    // Take a real number that can be written as k * 0.5
    // (where k is an integer greater than -1)
    // return the gamma coefficient of given real number
    public final double gamma(double x) {
        if(x == -0.5) {
            return -gamma(-x) / 0.5;
        } else if(x == 0.5) {
            return Math.sqrt(Math.PI);
        } else if(x == 0 || x == 1) {
            return 1;
        } else {
            return (x - 1) * gamma(x - 1);
        }
    }
    
    public abstract double variance();
    public abstract double mean();
    public abstract double median();
}