package distributions.density_function;

public class ChiSquare extends PDF {
    private int df;
    private double coefficient;
    
    public static final int MAX_DF = 205;
    
    public ChiSquare(int df) {
        super(0, Double.POSITIVE_INFINITY, true);
        if(df <= 0) {
            throw new IllegalArgumentException("Invalid degree of freedom : " + df);
        }
        this.df = df;
        coefficient = coefficient();
    }
    
    public double variance() {
        return 2 * df;
    }
    
    public double mean() {
        return df;
    }
    
    public double median() {
        return df * Math.pow(1 - 2.0 / 9 * df, 3);
    }
    
    // df is less than 205
    public double cumulativeProbability(double lowerBound, double upperBound) {
        /*if(df >= MAX_DF) {
            throw new IllegalStateException("current techique may not solve this problem");
        }*/
        return super.cumulativeProbability(lowerBound, upperBound);    
    }
    
    public double density(double x) {
        if(x < 0) {
            return 0;
        } else {
            return coefficient * Math.pow(x, 0.5 * df - 1) * Math.exp(-0.5 * x);
        }
    }
    
    public double inverse(double area) {
        return super.inverse(0, 10 * df, area);
    }
    
    public String toString() {
        return " ~ Ï‡^2(" + df + ")";
    }
    
    private double coefficient() {
        return 1.0 / gamma(0.5 * df) / Math.pow(2, 0.5 * df);
    }
    
    public double integral(double x) {
        return coefficient * integral(x, df);
    }
    
    public double integral(double x, int degree) {
        if(degree == 1) {
            return Math.sqrt(2 * Math.PI) * erf(Math.sqrt(x / 2));
        } else if(degree == 2) {
            return -2 * Math.exp(-0.5 * x);
        } else {
            double product = Math.pow(x, 0.5 * degree - 1) * Math.exp(-0.5 * x) / (-0.5);
            return product + (0.5 * degree - 1) / 0.5 * integral(x, degree - 2);
        }
    }
    
    public double integral2(double x) {
        double currentDegree = 0;
        double result = 0;
        if(df % 2 != 0) {
            result = Math.sqrt(2 * Math.PI) * erf(Math.sqrt(x / 2));
            currentDegree = 1;
        } else {
            result = -2 * Math.exp(-0.5 * x);
            currentDegree = 2;
        }
        while(currentDegree < df) {
            double product = -2 * Math.pow(x, 0.5 * currentDegree) * Math.exp(-0.5 * x);
            result = currentDegree * result + product;
            currentDegree += 2; 
        }
        return coefficient * result;
    }
    
    public static void main(String[] args) {
        ChiSquare cs = new ChiSquare(9);
        double test1 = cs.cumulativeProbability(1, 2);
        double test2 = cs.integral2(2) - cs.integral(1);
        double test3 = test1 / test2;
        System.out.println(test1);
        System.out.println(test2);
        System.out.println(test3);
    }
}