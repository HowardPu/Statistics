package distributions.mass_functions;

/*
 * This class defines a general probability mass functions,
 * which mean the probability distribution is discrete in the domain.
 * 
 * In order to extend this class a probability mass function like class should indicate
 *     1/ how to calculate the mass at each point -- mass(int x)
 *        (return NaN if given integer is out of domain)
 *     2/ how to get cumulative probability between two points(inclusive) 
 *        -- getCumulativeProbability(int lowerBound, int upperBound)
 *        (return NaN if given bounds are out of domain)
 *        (throw IllegalArgumentException if lowerBound is greater than upperBound)
 *     3/ how to get the variance of this probability mass function -- variance()
 *     4/ how to get the mean of this probability mass function -- mean()
 */

public abstract class PMF extends distributions.DistributionFunction {
    
	// lowestBound : the smallest real number that can be accepted for this PMF
    // highestBound : the highest real number that can be accepted for the PMF
    
    // Take lowestBound, highestBound, and isSkew as input,
    // construct a probability mass function for statistical calculation.
    public PMF(double lowestBound, double highestBound) {
        super(lowestBound, highestBound);
    }
    
    public abstract double mass(int x);
    
    public abstract double getCumulativeProbability(int lowerBound, int upperBound);
    
    public double inverse(double area) {
    	if(area < 0 || area > 1) {
    		throw new IllegalArgumentException("Invalid area : " + area);
    	}
    	if(area == 1) {
    		return super.getHighestBound();
    	}
    	int result = (int) super.getLowestBound();
    	int higherBound = (int) median();
    	double prob = mass(result);
    	if(area < prob) {
    		return result;
    	}
    	while(getCumulativeProbability(result, higherBound) < area) {
    		higherBound = higherBound * 2;
    	}
    	
    	return 0;
    }
    
    public abstract double mean();
    
    public abstract double variance();
    
    public double toInfinity(int x) {
    	if(x < super.getLowestBound()) {
    		return Double.NaN;
    	}
    	if(x == super.getLowestBound()) {
    		return 1;
    	} else {
    	    double result = 1 - getCumulativeProbability((int) super.getLowestBound(), x - 1);
    	    if(result < 0) {
    	    	return 0;
    	    } else if(result > 1) {
    	    	return 1;
    	    } else {
    	    	return result;
    	    }
    	}
    }
}
