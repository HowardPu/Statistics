package distributions.density_function;

/* This class defines a general probability density function, 
 * which is the probability distribution that is continuous 
 * from its lowest bound to the highest bound.
 * 
 * In order to extend from PDF, a class should implement the following methods
 *     1/ density(double x) : calculation the probability density at given real number 
 *                            if the given real number is not in the domain, the function should
 *                            return NAN.
 *     2/ integral(double x) : calculation of the indefinite integral of the probability density function
 *                             if the given real number is not in the domain, the function should
 *                             return NAN.
 *     3/ inverse(double area): calculation of a real number such that the area under the probability
 *                              density function from the negative infinity to returned real number
 *                              is given area.          
 */

public abstract class PDF extends distributions.DistributionFunction {
    private double lowestBound;
    private double highestBound;
    private boolean isSkew;
    
    public static final double EPSILON = 1E-14;
    
    // lowestBound : the smallest real number that can be accepted for this PDF
    // highestBound : the highest real number that can be accepted for the PDF
    // isSkew : a boolean value indicates whether the PDF is skew or not
    
    // Take lowestBound, highestBound, and isSkew as input,
    // construct a probability density function for statistical calculation..
    public PDF(double lowestBound, double highestBound, boolean isSkew) {
        if(lowestBound >= highestBound) {
            throw new IllegalArgumentException("Illegal domain of this distribution");
        }
        this.isSkew = isSkew;
        this.lowestBound = lowestBound;
        this.highestBound = highestBound;
    }
    
    // return true if the probability density function is skew.
    public boolean isSkew() {
    	return isSkew;
    }
    
    
    public abstract double density(double x);
    
    // take a real number as input
    // return the area under the probability density function from given number
    // to positive infinity
    // Note : return NaN if x is not in the domain of the probability density function
    //        or the highest bound is not positive infinity.
    public double toInfinity(double x) {
    	if(checkOutOfBound(x) || highestBound != Double.POSITIVE_INFINITY) {
    		return Double.NaN;
    	}
        if(isSkew) {
            double complement = cumulativeProbability(lowestBound, x);
            if(complement < 0) {
                return 1;
            } else {
                return Math.max(0, 1 - complement);
            }
        } else {
            if(x < 0) {
                return 1 - toInfinity(-x);
            } else {
                double lowerBound = Math.min(x, mean());
                double upperBound = Math.max(x, mean());
                double complement = 2 * cumulativeProbability(lowerBound, upperBound);
                if(complement > 1) {
                    return 0;
                } else if(complement < 0) {
                    return 1;
                } else {
                    return (1 - complement) / 2;
                }
            }
        }
    }
    
    // take a real number as input
    // return the area under the probability density function from negative infinity
    // to given real number
    // Note : return NaN if x is not in the domain of the probability density function
    //        or the lowest bound is not negative infinity.
    public double fromNegativeInfinity(double x) {
    	if(checkOutOfBound(x) || lowestBound != Double.NEGATIVE_INFINITY) {
    		return Double.NaN;
    	}
    	return 1 - toInfinity(x);
    }
    
    public double cumulativeProbability(double lowerBound, double upperBound) {
        if(lowerBound > upperBound) {
            throw new IllegalStateException("Illegal bound : lower bound : " + lowerBound + 
                                               " > upper bound : "  + upperBound);
        }
        if(checkOutOfBound(lowerBound) || checkOutOfBound(upperBound)) {
        	return Double.NaN;
        }
        if(lowerBound == upperBound) {
            return 0;
        } else {
            double result = integral(upperBound) - integral(lowerBound);
            if(result > 1) {
                return 1;
            } else {
                return Math.max(result, 0);
            }
        }
    }
    
    public abstract double integral(double x);
    
    public abstract double inverse(double area);
    
    
    // low is the artificial lower bound which is as close as the result generated 
    // from negative infinity (e.g. we can set `low` as -10 or -20 for Student-T distribution)
    
    // high is the artificial higher bound which is as close as the result generated from infinity
    // (e.g. we can set `high` as 10 or 20 for Student-T distribution)
    
    // area is the area under the probability density function integrated from infinity to the
    // return value is the given area
    
    // take artificial lower bound (low), artificial upper bound (high), and area (0 ~ 1) as input,
    // return a real number such that the area under the probability distribution from negative
    // infinity to the return value is given area.
    protected double inverse(double low, double high, double area) {
        if(area < 0 || area > 1) {
            throw new IllegalArgumentException("Illeagl area : " + area);
        }   
        if(area == 1) {
            return highestBound;
        } else if(area == 0) {
            return lowestBound;
        } else {
            double currentLow = low;
            double result = (currentLow + high) / 2;
            double currentArea = cumulativeProbability(low, result);
            while(Math.abs(area - currentArea) > EPSILON) {
                if(currentArea > area) {
                    high = result;
                } else {
                    currentLow = result;
                }
                result = (high + currentLow) / 2;
                currentArea = cumulativeProbability(low, result);
            }
            return result;
        } 
    }
    
    protected boolean checkOutOfBound(double x) {
    	return x < lowestBound || x > highestBound;
    }
}